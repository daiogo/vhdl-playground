-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.
--D1_count[2] is counter:value_counter|count[2]
--register power-up is low

D1_count[2] = DFFEAS(D1L10, clk, rst,  , D1L5,  ,  ,  ,  );


--D1_count[3] is counter:value_counter|count[3]
--register power-up is low

D1_count[3] = DFFEAS(D1L13, clk, rst,  , D1L5,  ,  ,  ,  );


--D1_count[4] is counter:value_counter|count[4]
--register power-up is low

D1_count[4] = DFFEAS(D1L16, clk, rst,  , D1L5,  ,  ,  ,  );


--D1_count[1] is counter:value_counter|count[1]
--register power-up is low

D1_count[1] = DFFEAS(D1L7, clk, rst,  , D1L5,  ,  ,  ,  );


--H1L1 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|add_sub_3_result_int[1]~0
H1L1 = D1_count[2] $ (VCC);

--H1L2 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|add_sub_3_result_int[1]~1
H1L2 = CARRY(D1_count[2]);


--H1L3 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|add_sub_3_result_int[2]~2
H1L3 = (D1_count[3] & (H1L2 & VCC)) # (!D1_count[3] & (!H1L2));

--H1L4 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|add_sub_3_result_int[2]~3
H1L4 = CARRY((!D1_count[3] & !H1L2));


--H1L5 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|add_sub_3_result_int[3]~4
H1L5 = (D1_count[4] & (H1L4 $ (GND))) # (!D1_count[4] & (!H1L4 & VCC));

--H1L6 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|add_sub_3_result_int[3]~5
H1L6 = CARRY((D1_count[4] & !H1L4));


--H1L7 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|add_sub_3_result_int[4]~6
H1L7 = !H1L6;


--H1L9 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|add_sub_4_result_int[1]~0
H1L9 = (((H1L19) # (H1L20)));

--H1L10 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|add_sub_4_result_int[1]~1
H1L10 = CARRY((H1L19) # (H1L20));


--H1L11 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|add_sub_4_result_int[2]~2
H1L11 = (H1L10 & (((H1L21) # (H1L22)))) # (!H1L10 & (!H1L21 & (!H1L22)));

--H1L12 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|add_sub_4_result_int[2]~3
H1L12 = CARRY((!H1L21 & (!H1L22 & !H1L10)));


--H1L13 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|add_sub_4_result_int[3]~4
H1L13 = (H1L12 & (((H1L23) # (H1L24)))) # (!H1L12 & ((((H1L23) # (H1L24)))));

--H1L14 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|add_sub_4_result_int[3]~5
H1L14 = CARRY((!H1L12 & ((H1L23) # (H1L24))));


--H1L16 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|add_sub_4_result_int[4]~7
H1L16 = CARRY((!H1L25 & (!H1L26 & !H1L14)));


--H1L17 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|add_sub_4_result_int[5]~8
H1L17 = H1L16;


--D1_count[0] is counter:value_counter|count[0]
--register power-up is low

D1_count[0] = DFFEAS(D1L3, clk, rst,  , D1L5,  ,  ,  ,  );


--D1L3 is counter:value_counter|count[0]~5
D1L3 = D1_count[0] $ (VCC);

--D1L4 is counter:value_counter|count[0]~6
D1L4 = CARRY(D1_count[0]);


--D1L7 is counter:value_counter|count[1]~7
D1L7 = (D1_count[1] & ((D1L23 & (!D1L4)) # (!D1L23 & (D1L4 & VCC)))) # (!D1_count[1] & ((D1L23 & ((D1L4) # (GND))) # (!D1L23 & (!D1L4))));

--D1L8 is counter:value_counter|count[1]~8
D1L8 = CARRY((D1_count[1] & (D1L23 & !D1L4)) # (!D1_count[1] & ((D1L23) # (!D1L4))));


--D1L10 is counter:value_counter|count[2]~9
D1L10 = ((D1_count[2] $ (D1L23 $ (D1L8)))) # (GND);

--D1L11 is counter:value_counter|count[2]~10
D1L11 = CARRY((D1_count[2] & ((!D1L8) # (!D1L23))) # (!D1_count[2] & (!D1L23 & !D1L8)));


--D1L13 is counter:value_counter|count[3]~12
D1L13 = (D1_count[3] & ((D1L23 & (!D1L11)) # (!D1L23 & (D1L11 & VCC)))) # (!D1_count[3] & ((D1L23 & ((D1L11) # (GND))) # (!D1L23 & (!D1L11))));

--D1L14 is counter:value_counter|count[3]~13
D1L14 = CARRY((D1_count[3] & (D1L23 & !D1L11)) # (!D1_count[3] & ((D1L23) # (!D1L11))));


--D1L16 is counter:value_counter|count[4]~14
D1L16 = D1_count[4] $ (D1L23 $ (D1L14));


--B1L1 is debouncer:up_debouncer|Add0~0
B1L1 = B1_count[0] $ (VCC);

--B1L2 is debouncer:up_debouncer|Add0~1
B1L2 = CARRY(B1_count[0]);


--B1L3 is debouncer:up_debouncer|Add0~2
B1L3 = (B1_count[1] & (!B1L2)) # (!B1_count[1] & ((B1L2) # (GND)));

--B1L4 is debouncer:up_debouncer|Add0~3
B1L4 = CARRY((!B1L2) # (!B1_count[1]));


--B1L5 is debouncer:up_debouncer|Add0~4
B1L5 = (B1_count[2] & (B1L4 $ (GND))) # (!B1_count[2] & (!B1L4 & VCC));

--B1L6 is debouncer:up_debouncer|Add0~5
B1L6 = CARRY((B1_count[2] & !B1L4));


--B1L7 is debouncer:up_debouncer|Add0~6
B1L7 = (B1_count[3] & (!B1L6)) # (!B1_count[3] & ((B1L6) # (GND)));

--B1L8 is debouncer:up_debouncer|Add0~7
B1L8 = CARRY((!B1L6) # (!B1_count[3]));


--B1L9 is debouncer:up_debouncer|Add0~8
B1L9 = (B1_count[4] & (B1L8 $ (GND))) # (!B1_count[4] & (!B1L8 & VCC));

--B1L10 is debouncer:up_debouncer|Add0~9
B1L10 = CARRY((B1_count[4] & !B1L8));


--B1L11 is debouncer:up_debouncer|Add0~10
B1L11 = (B1_count[5] & (!B1L10)) # (!B1_count[5] & ((B1L10) # (GND)));

--B1L12 is debouncer:up_debouncer|Add0~11
B1L12 = CARRY((!B1L10) # (!B1_count[5]));


--B1L13 is debouncer:up_debouncer|Add0~12
B1L13 = (B1_count[6] & (B1L12 $ (GND))) # (!B1_count[6] & (!B1L12 & VCC));

--B1L14 is debouncer:up_debouncer|Add0~13
B1L14 = CARRY((B1_count[6] & !B1L12));


--B1L15 is debouncer:up_debouncer|Add0~14
B1L15 = (B1_count[7] & (!B1L14)) # (!B1_count[7] & ((B1L14) # (GND)));

--B1L16 is debouncer:up_debouncer|Add0~15
B1L16 = CARRY((!B1L14) # (!B1_count[7]));


--B1L17 is debouncer:up_debouncer|Add0~16
B1L17 = (B1_count[8] & (B1L16 $ (GND))) # (!B1_count[8] & (!B1L16 & VCC));

--B1L18 is debouncer:up_debouncer|Add0~17
B1L18 = CARRY((B1_count[8] & !B1L16));


--B1L19 is debouncer:up_debouncer|Add0~18
B1L19 = (B1_count[9] & (!B1L18)) # (!B1_count[9] & ((B1L18) # (GND)));

--B1L20 is debouncer:up_debouncer|Add0~19
B1L20 = CARRY((!B1L18) # (!B1_count[9]));


--B1L21 is debouncer:up_debouncer|Add0~20
B1L21 = (B1_count[10] & (B1L20 $ (GND))) # (!B1_count[10] & (!B1L20 & VCC));

--B1L22 is debouncer:up_debouncer|Add0~21
B1L22 = CARRY((B1_count[10] & !B1L20));


--B1L23 is debouncer:up_debouncer|Add0~22
B1L23 = (B1_count[11] & (!B1L22)) # (!B1_count[11] & ((B1L22) # (GND)));

--B1L24 is debouncer:up_debouncer|Add0~23
B1L24 = CARRY((!B1L22) # (!B1_count[11]));


--B1L25 is debouncer:up_debouncer|Add0~24
B1L25 = (B1_count[12] & (B1L24 $ (GND))) # (!B1_count[12] & (!B1L24 & VCC));

--B1L26 is debouncer:up_debouncer|Add0~25
B1L26 = CARRY((B1_count[12] & !B1L24));


--B1L27 is debouncer:up_debouncer|Add0~26
B1L27 = (B1_count[13] & (!B1L26)) # (!B1_count[13] & ((B1L26) # (GND)));

--B1L28 is debouncer:up_debouncer|Add0~27
B1L28 = CARRY((!B1L26) # (!B1_count[13]));


--B1L29 is debouncer:up_debouncer|Add0~28
B1L29 = (B1_count[14] & (B1L28 $ (GND))) # (!B1_count[14] & (!B1L28 & VCC));

--B1L30 is debouncer:up_debouncer|Add0~29
B1L30 = CARRY((B1_count[14] & !B1L28));


--B1L31 is debouncer:up_debouncer|Add0~30
B1L31 = (B1_count[15] & (!B1L30)) # (!B1_count[15] & ((B1L30) # (GND)));

--B1L32 is debouncer:up_debouncer|Add0~31
B1L32 = CARRY((!B1L30) # (!B1_count[15]));


--B1L33 is debouncer:up_debouncer|Add0~32
B1L33 = (B1_count[16] & (B1L32 $ (GND))) # (!B1_count[16] & (!B1L32 & VCC));

--B1L34 is debouncer:up_debouncer|Add0~33
B1L34 = CARRY((B1_count[16] & !B1L32));


--B1L35 is debouncer:up_debouncer|Add0~34
B1L35 = (B1_count[17] & (!B1L34)) # (!B1_count[17] & ((B1L34) # (GND)));

--B1L36 is debouncer:up_debouncer|Add0~35
B1L36 = CARRY((!B1L34) # (!B1_count[17]));


--B1L37 is debouncer:up_debouncer|Add0~36
B1L37 = (B1_count[18] & (B1L36 $ (GND))) # (!B1_count[18] & (!B1L36 & VCC));

--B1L38 is debouncer:up_debouncer|Add0~37
B1L38 = CARRY((B1_count[18] & !B1L36));


--B1L39 is debouncer:up_debouncer|Add0~38
B1L39 = B1_count[19] $ (B1L38);


--B2L1 is debouncer:down_debouncer|Add0~0
B2L1 = B2_count[0] $ (VCC);

--B2L2 is debouncer:down_debouncer|Add0~1
B2L2 = CARRY(B2_count[0]);


--B2L3 is debouncer:down_debouncer|Add0~2
B2L3 = (B2_count[1] & (!B2L2)) # (!B2_count[1] & ((B2L2) # (GND)));

--B2L4 is debouncer:down_debouncer|Add0~3
B2L4 = CARRY((!B2L2) # (!B2_count[1]));


--B2L5 is debouncer:down_debouncer|Add0~4
B2L5 = (B2_count[2] & (B2L4 $ (GND))) # (!B2_count[2] & (!B2L4 & VCC));

--B2L6 is debouncer:down_debouncer|Add0~5
B2L6 = CARRY((B2_count[2] & !B2L4));


--B2L7 is debouncer:down_debouncer|Add0~6
B2L7 = (B2_count[3] & (!B2L6)) # (!B2_count[3] & ((B2L6) # (GND)));

--B2L8 is debouncer:down_debouncer|Add0~7
B2L8 = CARRY((!B2L6) # (!B2_count[3]));


--B2L9 is debouncer:down_debouncer|Add0~8
B2L9 = (B2_count[4] & (B2L8 $ (GND))) # (!B2_count[4] & (!B2L8 & VCC));

--B2L10 is debouncer:down_debouncer|Add0~9
B2L10 = CARRY((B2_count[4] & !B2L8));


--B2L11 is debouncer:down_debouncer|Add0~10
B2L11 = (B2_count[5] & (!B2L10)) # (!B2_count[5] & ((B2L10) # (GND)));

--B2L12 is debouncer:down_debouncer|Add0~11
B2L12 = CARRY((!B2L10) # (!B2_count[5]));


--B2L13 is debouncer:down_debouncer|Add0~12
B2L13 = (B2_count[6] & (B2L12 $ (GND))) # (!B2_count[6] & (!B2L12 & VCC));

--B2L14 is debouncer:down_debouncer|Add0~13
B2L14 = CARRY((B2_count[6] & !B2L12));


--B2L15 is debouncer:down_debouncer|Add0~14
B2L15 = (B2_count[7] & (!B2L14)) # (!B2_count[7] & ((B2L14) # (GND)));

--B2L16 is debouncer:down_debouncer|Add0~15
B2L16 = CARRY((!B2L14) # (!B2_count[7]));


--B2L17 is debouncer:down_debouncer|Add0~16
B2L17 = (B2_count[8] & (B2L16 $ (GND))) # (!B2_count[8] & (!B2L16 & VCC));

--B2L18 is debouncer:down_debouncer|Add0~17
B2L18 = CARRY((B2_count[8] & !B2L16));


--B2L19 is debouncer:down_debouncer|Add0~18
B2L19 = (B2_count[9] & (!B2L18)) # (!B2_count[9] & ((B2L18) # (GND)));

--B2L20 is debouncer:down_debouncer|Add0~19
B2L20 = CARRY((!B2L18) # (!B2_count[9]));


--B2L21 is debouncer:down_debouncer|Add0~20
B2L21 = (B2_count[10] & (B2L20 $ (GND))) # (!B2_count[10] & (!B2L20 & VCC));

--B2L22 is debouncer:down_debouncer|Add0~21
B2L22 = CARRY((B2_count[10] & !B2L20));


--B2L23 is debouncer:down_debouncer|Add0~22
B2L23 = (B2_count[11] & (!B2L22)) # (!B2_count[11] & ((B2L22) # (GND)));

--B2L24 is debouncer:down_debouncer|Add0~23
B2L24 = CARRY((!B2L22) # (!B2_count[11]));


--B2L25 is debouncer:down_debouncer|Add0~24
B2L25 = (B2_count[12] & (B2L24 $ (GND))) # (!B2_count[12] & (!B2L24 & VCC));

--B2L26 is debouncer:down_debouncer|Add0~25
B2L26 = CARRY((B2_count[12] & !B2L24));


--B2L27 is debouncer:down_debouncer|Add0~26
B2L27 = (B2_count[13] & (!B2L26)) # (!B2_count[13] & ((B2L26) # (GND)));

--B2L28 is debouncer:down_debouncer|Add0~27
B2L28 = CARRY((!B2L26) # (!B2_count[13]));


--B2L29 is debouncer:down_debouncer|Add0~28
B2L29 = (B2_count[14] & (B2L28 $ (GND))) # (!B2_count[14] & (!B2L28 & VCC));

--B2L30 is debouncer:down_debouncer|Add0~29
B2L30 = CARRY((B2_count[14] & !B2L28));


--B2L31 is debouncer:down_debouncer|Add0~30
B2L31 = (B2_count[15] & (!B2L30)) # (!B2_count[15] & ((B2L30) # (GND)));

--B2L32 is debouncer:down_debouncer|Add0~31
B2L32 = CARRY((!B2L30) # (!B2_count[15]));


--B2L33 is debouncer:down_debouncer|Add0~32
B2L33 = (B2_count[16] & (B2L32 $ (GND))) # (!B2_count[16] & (!B2L32 & VCC));

--B2L34 is debouncer:down_debouncer|Add0~33
B2L34 = CARRY((B2_count[16] & !B2L32));


--B2L35 is debouncer:down_debouncer|Add0~34
B2L35 = (B2_count[17] & (!B2L34)) # (!B2_count[17] & ((B2L34) # (GND)));

--B2L36 is debouncer:down_debouncer|Add0~35
B2L36 = CARRY((!B2L34) # (!B2_count[17]));


--B2L37 is debouncer:down_debouncer|Add0~36
B2L37 = (B2_count[18] & (B2L36 $ (GND))) # (!B2_count[18] & (!B2L36 & VCC));

--B2L38 is debouncer:down_debouncer|Add0~37
B2L38 = CARRY((B2_count[18] & !B2L36));


--B2L39 is debouncer:down_debouncer|Add0~38
B2L39 = B2_count[19] $ (B2L38);


--tens_ssd[0] is tens_ssd[0]
tens_ssd[0] = OUTPUT(C1L1);


--tens_ssd[1] is tens_ssd[1]
tens_ssd[1] = OUTPUT(C1L5);


--tens_ssd[2] is tens_ssd[2]
tens_ssd[2] = OUTPUT(C1L2);


--tens_ssd[3] is tens_ssd[3]
tens_ssd[3] = OUTPUT(C1L4);


--tens_ssd[4] is tens_ssd[4]
tens_ssd[4] = OUTPUT(C1L3);


--tens_ssd[5] is tens_ssd[5]
tens_ssd[5] = OUTPUT(A1L21);


--tens_ssd[6] is tens_ssd[6]
tens_ssd[6] = OUTPUT(C1L4);


--units_ssd[0] is units_ssd[0]
units_ssd[0] = OUTPUT(C2L1);


--units_ssd[1] is units_ssd[1]
units_ssd[1] = OUTPUT(C2L2);


--units_ssd[2] is units_ssd[2]
units_ssd[2] = OUTPUT(C2L3);


--units_ssd[3] is units_ssd[3]
units_ssd[3] = OUTPUT(C2L4);


--units_ssd[4] is units_ssd[4]
units_ssd[4] = OUTPUT(C2L6);


--units_ssd[5] is units_ssd[5]
units_ssd[5] = OUTPUT(C2L7);


--units_ssd[6] is units_ssd[6]
units_ssd[6] = OUTPUT(C2L8);


--C1L1 is ssd_driver:tens_digit_display|decimal_out[0]~0
C1L1 = ((!D1_count[2] & !D1_count[3])) # (!D1_count[4]);


--C1L5 is ssd_driver:tens_digit_display|Equal15~0
C1L5 = (D1_count[4]) # ((D1_count[3] & ((D1_count[2]) # (D1_count[1]))));


--C1L2 is ssd_driver:tens_digit_display|decimal_out[2]~1
C1L2 = (D1_count[4] & ((D1_count[3] & (D1_count[2] & D1_count[1])) # (!D1_count[3] & (!D1_count[2])))) # (!D1_count[4] & (D1_count[3] & ((D1_count[2]) # (D1_count[1]))));


--C1L4 is ssd_driver:tens_digit_display|Equal14~0
C1L4 = (D1_count[4] & (!D1_count[3] & (!D1_count[2]))) # (!D1_count[4] & (D1_count[3] & ((D1_count[2]) # (D1_count[1]))));


--C1L3 is ssd_driver:tens_digit_display|Equal13~0
C1L3 = (D1_count[4] & ((D1_count[3] & ((!D1_count[1]) # (!D1_count[2]))) # (!D1_count[3] & (D1_count[2]))));


--H1L21 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|StageOut[16]~0
H1L21 = (D1_count[2] & H1L7);


--H1L22 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|StageOut[16]~1
H1L22 = (H1L1 & !H1L7);


--H1L19 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|StageOut[15]~2
H1L19 = (D1_count[1] & H1L7);


--H1L20 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|StageOut[15]~3
H1L20 = (D1_count[1] & !H1L7);


--H1L25 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|StageOut[18]~4
H1L25 = (D1_count[4] & H1L7);


--H1L26 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|StageOut[18]~5
H1L26 = (H1L5 & !H1L7);


--H1L23 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|StageOut[17]~6
H1L23 = (D1_count[3] & H1L7);


--H1L24 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|StageOut[17]~7
H1L24 = (H1L3 & !H1L7);


--H1L28 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|StageOut[22]~8
H1L28 = (H1L17 & (((H1L21) # (H1L22)))) # (!H1L17 & (H1L11));


--H1L27 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|StageOut[21]~9
H1L27 = (H1L17 & (D1_count[1])) # (!H1L17 & ((H1L9)));


--H1L29 is counter:value_counter|lpm_divide:Mod0|lpm_divide_b8m:auto_generated|sign_div_unsign_9kh:divider|alt_u_div_t2f:divider|StageOut[23]~10
H1L29 = (H1L17 & (((H1L23) # (H1L24)))) # (!H1L17 & (H1L13));


--C2L1 is ssd_driver:units_digit_display|decimal_out[0]~0
C2L1 = (D1_count[0] & (!H1L29 & (H1L28 $ (!H1L27)))) # (!D1_count[0] & (!H1L27 & (H1L28 $ (!H1L29))));


--C2L2 is ssd_driver:units_digit_display|decimal_out[1]~1
C2L2 = (D1_count[0] & (H1L29 $ (((H1L27) # (!H1L28))))) # (!D1_count[0] & (!H1L28 & (H1L27 & !H1L29)));


--C2L3 is ssd_driver:units_digit_display|decimal_out[2]~2
C2L3 = (H1L27 & (!H1L29 & (D1_count[0]))) # (!H1L27 & ((H1L28 & (!H1L29)) # (!H1L28 & ((D1_count[0])))));


--C2L4 is ssd_driver:units_digit_display|decimal_out[3]~3
C2L4 = (H1L27 & ((D1_count[0] & (H1L28)) # (!D1_count[0] & (!H1L28 & H1L29)))) # (!H1L27 & (!H1L29 & (D1_count[0] $ (H1L28))));


--C2L5 is ssd_driver:units_digit_display|decimal_out[4]~4
C2L5 = (H1L29 & (((D1_count[0] & !H1L27)) # (!H1L28))) # (!H1L29 & ((D1_count[0]) # ((H1L28) # (!H1L27))));


--C2L7 is ssd_driver:units_digit_display|decimal_out[5]~5
C2L7 = (H1L29 & ((D1_count[0] & (H1L27)) # (!D1_count[0] & ((H1L28))))) # (!H1L29 & (H1L28 & (H1L27 $ (D1_count[0]))));


--C2L8 is ssd_driver:units_digit_display|decimal_out[6]~6
C2L8 = (H1L29 & (D1_count[0] & (H1L27 $ (H1L28)))) # (!H1L29 & (!H1L27 & (D1_count[0] $ (H1L28))));


--clk is clk
clk = INPUT();


--D1L20 is counter:value_counter|LessThan0~0
D1L20 = (((!D1_count[1]) # (!D1_count[3])) # (!D1_count[2])) # (!D1_count[4]);


--B1_y is debouncer:up_debouncer|y
--register power-up is low

B1_y = DFFEAS(B1L91, clk,  ,  ,  ,  ,  ,  ,  );


--D1_up_pressed is counter:value_counter|up_pressed
--register power-up is low

D1_up_pressed = DFFEAS(D1L25, clk,  ,  ,  ,  ,  ,  ,  );


--D1L23 is counter:value_counter|process_0~0
D1L23 = (D1L20 & (!B1_y & !D1_up_pressed));


--rst is rst
rst = INPUT();


--B2_y is debouncer:down_debouncer|y
--register power-up is low

B2_y = DFFEAS(B2L90, clk,  ,  ,  ,  ,  ,  ,  );


--D1_down_pressed is counter:value_counter|down_pressed
--register power-up is low

D1_down_pressed = DFFEAS(D1L19, clk,  ,  ,  ,  ,  ,  ,  );


--D1L21 is counter:value_counter|LessThan1~0
D1L21 = (D1_count[4]) # ((D1_count[2]) # ((D1_count[3]) # (D1_count[1])));


--D1L22 is counter:value_counter|LessThan1~1
D1L22 = (D1_count[0]) # (D1L21);


--D1L5 is counter:value_counter|count[0]~11
D1L5 = (D1L23) # ((!B2_y & (!D1_down_pressed & D1L22)));


--up is up
up = INPUT();


--B1_count[16] is debouncer:up_debouncer|count[16]
--register power-up is low

B1_count[16] = DFFEAS(B1L64, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[15] is debouncer:up_debouncer|count[15]
--register power-up is low

B1_count[15] = DFFEAS(B1L65, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[14] is debouncer:up_debouncer|count[14]
--register power-up is low

B1_count[14] = DFFEAS(B1L66, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[13] is debouncer:up_debouncer|count[13]
--register power-up is low

B1_count[13] = DFFEAS(B1L67, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[12] is debouncer:up_debouncer|count[12]
--register power-up is low

B1_count[12] = DFFEAS(B1L68, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[11] is debouncer:up_debouncer|count[11]
--register power-up is low

B1_count[11] = DFFEAS(B1L69, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[10] is debouncer:up_debouncer|count[10]
--register power-up is low

B1_count[10] = DFFEAS(B1L70, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[9] is debouncer:up_debouncer|count[9]
--register power-up is low

B1_count[9] = DFFEAS(B1L71, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[8] is debouncer:up_debouncer|count[8]
--register power-up is low

B1_count[8] = DFFEAS(B1L72, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[7] is debouncer:up_debouncer|count[7]
--register power-up is low

B1_count[7] = DFFEAS(B1L73, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[6] is debouncer:up_debouncer|count[6]
--register power-up is low

B1_count[6] = DFFEAS(B1L74, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[5] is debouncer:up_debouncer|count[5]
--register power-up is low

B1_count[5] = DFFEAS(B1L75, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[4] is debouncer:up_debouncer|count[4]
--register power-up is low

B1_count[4] = DFFEAS(B1L76, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[3] is debouncer:up_debouncer|count[3]
--register power-up is low

B1_count[3] = DFFEAS(B1L77, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[2] is debouncer:up_debouncer|count[2]
--register power-up is low

B1_count[2] = DFFEAS(B1L78, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[1] is debouncer:up_debouncer|count[1]
--register power-up is low

B1_count[1] = DFFEAS(B1L79, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[0] is debouncer:up_debouncer|count[0]
--register power-up is low

B1_count[0] = DFFEAS(B1L80, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[17] is debouncer:up_debouncer|count[17]
--register power-up is low

B1_count[17] = DFFEAS(B1L81, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[18] is debouncer:up_debouncer|count[18]
--register power-up is low

B1_count[18] = DFFEAS(B1L82, clk,  ,  ,  ,  ,  ,  ,  );


--B1_count[19] is debouncer:up_debouncer|count[19]
--register power-up is low

B1_count[19] = DFFEAS(B1L83, clk,  ,  ,  ,  ,  ,  ,  );


--B1L84 is debouncer:up_debouncer|Equal0~0
B1L84 = (((!B1L39) # (!B1L37)) # (!B1L35)) # (!B1L33);


--B1L85 is debouncer:up_debouncer|Equal0~1
B1L85 = (B1L1) # ((B1L3) # ((B1L5) # (B1L7)));


--B1L86 is debouncer:up_debouncer|Equal0~2
B1L86 = (B1L9) # ((B1L11) # ((B1L15) # (!B1L13)));


--B1L87 is debouncer:up_debouncer|Equal0~3
B1L87 = (B1L17) # ((B1L21) # ((B1L23) # (!B1L19)));


--B1L88 is debouncer:up_debouncer|Equal0~4
B1L88 = (B1L25) # ((B1L27) # ((B1L31) # (!B1L29)));


--B1L89 is debouncer:up_debouncer|Equal0~5
B1L89 = (B1L85) # ((B1L86) # ((B1L87) # (B1L88)));


--B1L91 is debouncer:up_debouncer|y~0
B1L91 = (B1L84 & (B1_y)) # (!B1L84 & ((B1L89 & (B1_y)) # (!B1L89 & ((up)))));


--D1L25 is counter:value_counter|up_pressed~0
D1L25 = (!B1_y & ((D1_up_pressed) # ((D1L20 & rst))));


--down is down
down = INPUT();


--B2_count[16] is debouncer:down_debouncer|count[16]
--register power-up is low

B2_count[16] = DFFEAS(B2L62, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[15] is debouncer:down_debouncer|count[15]
--register power-up is low

B2_count[15] = DFFEAS(B2L63, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[14] is debouncer:down_debouncer|count[14]
--register power-up is low

B2_count[14] = DFFEAS(B2L64, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[13] is debouncer:down_debouncer|count[13]
--register power-up is low

B2_count[13] = DFFEAS(B2L65, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[12] is debouncer:down_debouncer|count[12]
--register power-up is low

B2_count[12] = DFFEAS(B2L66, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[11] is debouncer:down_debouncer|count[11]
--register power-up is low

B2_count[11] = DFFEAS(B2L67, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[10] is debouncer:down_debouncer|count[10]
--register power-up is low

B2_count[10] = DFFEAS(B2L68, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[9] is debouncer:down_debouncer|count[9]
--register power-up is low

B2_count[9] = DFFEAS(B2L69, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[8] is debouncer:down_debouncer|count[8]
--register power-up is low

B2_count[8] = DFFEAS(B2L70, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[7] is debouncer:down_debouncer|count[7]
--register power-up is low

B2_count[7] = DFFEAS(B2L71, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[6] is debouncer:down_debouncer|count[6]
--register power-up is low

B2_count[6] = DFFEAS(B2L72, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[5] is debouncer:down_debouncer|count[5]
--register power-up is low

B2_count[5] = DFFEAS(B2L73, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[4] is debouncer:down_debouncer|count[4]
--register power-up is low

B2_count[4] = DFFEAS(B2L74, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[3] is debouncer:down_debouncer|count[3]
--register power-up is low

B2_count[3] = DFFEAS(B2L75, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[2] is debouncer:down_debouncer|count[2]
--register power-up is low

B2_count[2] = DFFEAS(B2L76, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[1] is debouncer:down_debouncer|count[1]
--register power-up is low

B2_count[1] = DFFEAS(B2L77, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[0] is debouncer:down_debouncer|count[0]
--register power-up is low

B2_count[0] = DFFEAS(B2L78, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[17] is debouncer:down_debouncer|count[17]
--register power-up is low

B2_count[17] = DFFEAS(B2L79, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[18] is debouncer:down_debouncer|count[18]
--register power-up is low

B2_count[18] = DFFEAS(B2L80, clk,  ,  ,  ,  ,  ,  ,  );


--B2_count[19] is debouncer:down_debouncer|count[19]
--register power-up is low

B2_count[19] = DFFEAS(B2L81, clk,  ,  ,  ,  ,  ,  ,  );


--B2L82 is debouncer:down_debouncer|Equal0~0
B2L82 = (((!B2L39) # (!B2L37)) # (!B2L35)) # (!B2L33);


--B2L83 is debouncer:down_debouncer|Equal0~1
B2L83 = (B2L1) # ((B2L3) # ((B2L5) # (B2L7)));


--B2L84 is debouncer:down_debouncer|Equal0~2
B2L84 = (B2L9) # ((B2L11) # ((B2L15) # (!B2L13)));


--B2L85 is debouncer:down_debouncer|Equal0~3
B2L85 = (B2L17) # ((B2L21) # ((B2L23) # (!B2L19)));


--B2L86 is debouncer:down_debouncer|Equal0~4
B2L86 = (B2L25) # ((B2L27) # ((B2L31) # (!B2L29)));


--B2L87 is debouncer:down_debouncer|Equal0~5
B2L87 = (B2L83) # ((B2L84) # ((B2L85) # (B2L86)));


--B2L90 is debouncer:down_debouncer|y~0
B2L90 = (B2L82 & (B2_y)) # (!B2L82 & ((B2L87 & (B2_y)) # (!B2L87 & ((down)))));


--D1L19 is counter:value_counter|down_pressed~0
D1L19 = (!B2_y & ((D1_down_pressed) # ((rst & D1L22))));


--B1L56 is debouncer:up_debouncer|count[13]~0
B1L56 = (B1L33 & (B1L35 & (B1L37 & B1L39)));


--B1L57 is debouncer:up_debouncer|count[13]~1
B1L57 = (B1L89 & (B1_y $ ((up)))) # (!B1L89 & (!B1L56 & (B1_y $ (up))));


--B1L64 is debouncer:up_debouncer|count~2
B1L64 = (B1L33 & B1L57);


--B1L65 is debouncer:up_debouncer|count~3
B1L65 = (B1L31 & B1L57);


--B1L66 is debouncer:up_debouncer|count~4
B1L66 = (B1L29 & B1L57);


--B1L67 is debouncer:up_debouncer|count~5
B1L67 = (B1L27 & B1L57);


--B1L68 is debouncer:up_debouncer|count~6
B1L68 = (B1L25 & B1L57);


--B1L69 is debouncer:up_debouncer|count~7
B1L69 = (B1L23 & B1L57);


--B1L70 is debouncer:up_debouncer|count~8
B1L70 = (B1L21 & B1L57);


--B1L71 is debouncer:up_debouncer|count~9
B1L71 = (B1L19 & B1L57);


--B1L72 is debouncer:up_debouncer|count~10
B1L72 = (B1L17 & B1L57);


--B1L73 is debouncer:up_debouncer|count~11
B1L73 = (B1L15 & B1L57);


--B1L74 is debouncer:up_debouncer|count~12
B1L74 = (B1L13 & B1L57);


--B1L75 is debouncer:up_debouncer|count~13
B1L75 = (B1L11 & B1L57);


--B1L76 is debouncer:up_debouncer|count~14
B1L76 = (B1L9 & B1L57);


--B1L77 is debouncer:up_debouncer|count~15
B1L77 = (B1L7 & B1L57);


--B1L78 is debouncer:up_debouncer|count~16
B1L78 = (B1L5 & B1L57);


--B1L79 is debouncer:up_debouncer|count~17
B1L79 = (B1L3 & B1L57);


--B1L80 is debouncer:up_debouncer|count~18
B1L80 = (B1L1 & B1L57);


--B1L81 is debouncer:up_debouncer|count~19
B1L81 = (B1L35 & B1L57);


--B1L82 is debouncer:up_debouncer|count~20
B1L82 = (B1L37 & B1L57);


--B1L83 is debouncer:up_debouncer|count~21
B1L83 = (B1L39 & B1L57);


--B2L88 is debouncer:down_debouncer|process_0~0
B2L88 = B2_y $ (down);


--B2L62 is debouncer:down_debouncer|count~0
B2L62 = (B2L88 & (B2L33 & ((B2L82) # (B2L87))));


--B2L63 is debouncer:down_debouncer|count~1
B2L63 = (B2L88 & (B2L31 & ((B2L82) # (B2L87))));


--B2L64 is debouncer:down_debouncer|count~2
B2L64 = (B2L88 & (B2L29 & ((B2L82) # (B2L87))));


--B2L65 is debouncer:down_debouncer|count~3
B2L65 = (B2L88 & (B2L27 & ((B2L82) # (B2L87))));


--B2L66 is debouncer:down_debouncer|count~4
B2L66 = (B2L88 & (B2L25 & ((B2L82) # (B2L87))));


--B2L67 is debouncer:down_debouncer|count~5
B2L67 = (B2L88 & (B2L23 & ((B2L82) # (B2L87))));


--B2L68 is debouncer:down_debouncer|count~6
B2L68 = (B2L88 & (B2L21 & ((B2L82) # (B2L87))));


--B2L69 is debouncer:down_debouncer|count~7
B2L69 = (B2L88 & (B2L19 & ((B2L82) # (B2L87))));


--B2L70 is debouncer:down_debouncer|count~8
B2L70 = (B2L88 & (B2L17 & ((B2L82) # (B2L87))));


--B2L71 is debouncer:down_debouncer|count~9
B2L71 = (B2L88 & (B2L15 & ((B2L82) # (B2L87))));


--B2L72 is debouncer:down_debouncer|count~10
B2L72 = (B2L88 & (B2L13 & ((B2L82) # (B2L87))));


--B2L73 is debouncer:down_debouncer|count~11
B2L73 = (B2L88 & (B2L11 & ((B2L82) # (B2L87))));


--B2L74 is debouncer:down_debouncer|count~12
B2L74 = (B2L88 & (B2L9 & ((B2L82) # (B2L87))));


--B2L75 is debouncer:down_debouncer|count~13
B2L75 = (B2L88 & (B2L7 & ((B2L82) # (B2L87))));


--B2L76 is debouncer:down_debouncer|count~14
B2L76 = (B2L88 & (B2L5 & ((B2L82) # (B2L87))));


--B2L77 is debouncer:down_debouncer|count~15
B2L77 = (B2L88 & (B2L3 & ((B2L82) # (B2L87))));


--B2L78 is debouncer:down_debouncer|count~16
B2L78 = (B2L88 & (B2L1 & ((B2L82) # (B2L87))));


--B2L79 is debouncer:down_debouncer|count~17
B2L79 = (B2L88 & (B2L35 & ((B2L82) # (B2L87))));


--B2L80 is debouncer:down_debouncer|count~18
B2L80 = (B2L88 & (B2L37 & ((B2L82) # (B2L87))));


--B2L81 is debouncer:down_debouncer|count~19
B2L81 = (B2L88 & (B2L39 & ((B2L82) # (B2L87))));


--A1L21 is ~GND
A1L21 = GND;


--C2L6 is ssd_driver:units_digit_display|decimal_out[4]~4_wirecell
C2L6 = !C2L5;


