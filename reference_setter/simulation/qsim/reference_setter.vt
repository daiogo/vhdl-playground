// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/09/2016 01:52:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    reference_setter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module reference_setter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg down;
reg rst;
reg up;
// wires                                               
wire [6:0] display1;
wire [6:0] display2;

// assign statements (if any)                          
reference_setter i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.display1(display1),
	.display2(display2),
	.down(down),
	.rst(rst),
	.up(up)
);
initial 
begin 
#1000000 $finish;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #50000 1'b1;
end 

// up
initial
begin
	up = 1'b1;
	up = #70000 1'b0;
	up = #30000 1'b1;
	up = #40000 1'b0;
	up = #40000 1'b1;
end 

// down
initial
begin
	down = 1'b1;
	down = #230000 1'b0;
	down = #20000 1'b1;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

